2009-10-28  -  PlProxy 2.0.9  -  "Five-Nines Guarantee For Not Bricking The Server"

  = Features =

  * More flexible CONNECT statement:

      CONNECT func(..);
      CONNECT argname;
      CONNECT $argnum;

    NB: giving untrusted users ability to specify full connect string creates
    security hole.  Eg it can used to read cleartext passwords from .pgpass/pg_service.
    If such function cannot be avoided, it's access rights need to be restricted.

    (Ian Sollars)

  = Fixes =

  * Avoid parsing "SELECT (" as function call.  Otherwise following query
    fails to parse: SELECT (0*0);
    (Peter Eisentraut)

  * Make scanner accept dot as standalone symbol.  Otherwise following query
    fails to parse: SELECT (ret_numtuple(1)).num, (ret_numtuple(1)).name;
    (Peter Eisentraut)

  * Argument type name length over 32 could cause buffer overflow.
    (Ian Sollars)

  * Fix crash with incoming NULL value in function containing SELECT
    with different argument order.  Due to thinko, NULL check was done
    with query arg index, instead of function arg index.
    (JoÃ£o Matos)

  * geterrcode(): Switch memory context to work around Assert() in CopyErrorData().

2009-01-16  -  PlProxy 2.0.8  -  "Simple Multi-Tentacle Arhitecture"

  = Features =

  * If query is canceled, send cancel request to remote db too.
    (Ye Wenbin)

  * Allow direct argument references in RUN ON statement.
    Now this works: RUN ON $1;   RUN ON arg;

  * Add FAQ to docs which answers few common questions.

  = Fixes =

  * Clear ->tuning bit on connection close.

    If 'SET client_encoding' fails, the bit can stay set,
    thus creating always-failing connection slot.

    Reported and analyzed by Jonah Harris.

2008-09-29  -  PlProxy 2.0.7  -  "The Ninja of Shadow"

  = Fixes =

  * Make sure client_encoding on remote server encoding is set to
    local server encoding.  Currently plproxy set it to local
    client_encoding, which is wrong as all data is immediately converted
    to server_encoding by Postgres.  The problem went mostly undetected
    because of plproxy use of binary I/O which bypasses encoding
    conversions.
    (Hiroshi Saito)

    So if you pass non-ascii data around and your client, proxy server
    and target server may have different encodings, you may want to
    re-check your data.

  * Disable binary i/o completely.  Currently the decision is done
    too early, before remote connection is established.  Currently
    the fix was to use only "safe" types for binary I/O, but now
    that text types are also unsafe, it's pointless.  Instead
    type handling should be rewritten to allow lazy decision-making.

  * Fix crash with unnamed function input arguments.

  * Fix compilation with 8.2 on Win32 by providing PGDLLIMPORT if unset.
    (Hiroshi Saito)

  * Accept >128 chars as part of identifier names.

  * New regtest to detect encoding problems.

  * Use pg_strcasecmp instead of strcasecmp to be consistent with
    Postgres code.

  * deb: Survive empty FLEX/BISON defs from PGXS.
    Accept also postgresql-server-dev-8.3 as build dep.

2008-09-05  -  PlProxy 2.0.6  -  "Agile Voodoo"

  = Features =

  * Support functions that return plain RECORD without
    OUT parameters.  Such functions need result type
    specified on each call with AS clause and the
    types need to be sent to remote database also.
    (Lei Yonghua)

    This makes possible to use PL/Proxy for dynamic queries:

    CREATE FUNCTION run_query(sql text) RETURNS RECORD ..
    SELECT * FROM run_query('select a,b from ..') AS (a int, b text);

  * Accept int2/int8 values from hash function,
    in addition to int4.

  = Fixes =

  * Replace bitfields with bool to conform better
    with Postgres coding style.
  * Don't use alloca() in parser.
  * Make scanner more robust to allocation errors
    by doing total reset before parsing.
  * Require exactly one row from remote query for
    non-SETOF functions.
  * Docs: tag all functions with embedded SELECT with SETOF.
  * Make it compile on win32 (Hiroshi Saito)
  * Make regtest tolerant to random() implementation differneces
    between different OSes.

2008-06-06  -  PlProxy 2.0.5  -  "Universal Shredder"

  * Fix crash if a function with "CLUSTER 'name';"
    is parsed after function with "CLUSTER func();".
    A palloc()ed pointer was not reset.
  * RUN ON is now optional, defaulting to RUN ON ANY;
    Should make creating simple RPC and load-balancing
    functions easier easier.
  * Make compat poll() function behave more like actual poll().

2008-01-04  -  PlProxy 2.0.4  -  "Vampire-proof"

  * Fix crash due to bad error reporting when remote db
    closes socket unexpectedly.
  * Use pg_strcasecmp to compare encodings.
  * Log encoding values if it fails to apply.
  * Replace select(2) with poll(2) to allow large fd values.
    Old select(2) usage could cause problems when plproxy
    was installed on database with lot of tables/indexes,
    where Postgres itself could have had lot of files open.
  * Disable binary I/O for timestamp(tz) and date/time types,
    to avoid problems when local and remote Postgres have
    different setting for integer_datetimes.

2007-12-10  -  PlProxy 2.0.3  -  "Faster Than A Fresh Zombie"

  = Features =

    * Explicitly specify result column names and types in query.

      Lets say there is function somefunc(out id int4, out data text).
      Previously pl/proxy issued following query:

        SELECT * FROM somefunc()
      
      And later tried to work out which column goes where.  Now it issues:

        SELECT id::int4, data::text FROM somefunc()

      For functions without named return paramenters, eg. just "RETURNS text":

        SELECT r::text FROM anotherfunc() r

      This gives better type safety when using binary I/O, allows signatures
      differ in deterministic ways and creates safe upgrade path for signatures.

      Only downside is that existing functions with wildly different signatures
      stop working, but as they work on pure luck anyway, I'm not worried.

    * Quote function and result column names properly.

    * Set client_encoding on remote database to be equal to local one.

    * Tutorial by Steve Singer.

  = Fixes =

    * Support 8.3 (handle short varlena header)

    * Support old flex (2.5.4)  Previously flex >= 2.5.33 was required.

    * Fix 'make deb', include actual debian/changelog.

    * Remove config paramenter 'statement_timeout'.
    
      It was ignored previously and it cannot be made work in live env
      when working thru pgbouncer, so its better to drop it completely.
      The setting can be always set via normal ways.
      

2007-04-16  -  PlProxy 2.0.2  -  "No news is good news?"

    * Include plproxy.sql.in in tgz.
    * Clean add_connection() function by using StringInfo instead
      open-coded string shuffling.

